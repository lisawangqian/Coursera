good<-complete.cases(x)
x[good,]["Ozone",]
x
good<-complete.cases(x)
good
good<-complete.case(x["Ozone",])
y<-x["Ozone",]
y
x
good<-complete.cases(x[,"Ozone"])
good
bad<-is.na(X[,"Ozone"])
bad<-is.na(x[,"Ozone"])
bad
y<-x[, "Ozone"]
y
y<-x[,"Ozone",drop=FALSE]
Y
y
bad<-is.na(y)
bad
mean(y, na.bad=FALSE)
mean(y,na.rm=TRUE)
new<-na.omit(y)
new
mean(new)
saaply(y, mean, na.rm=TRUE)
find.package
y
colMeans(y)
mean(y[[1]])
help mean
mean(y[[2]])
mean(new)
mean(new[[1]])
new2<-x[which Ozone>31 & Temp>90]
new2<-x[which (x$Ozone>31 & x$Temp>90),]
new2
Colmean(new2)
mean(new2[[2]])
new3<-x[which (x$Moutn==6),]
new3
x
new3<-x[which (x$Month==6),]
new3
mean(new3)
mean(new3[[4]])
new4<-x[which(x$Mouth==5),Ozone]
new4<-x[which(x$Month==5), Ozone]
new4<-x[which(x$Month==5), ][, Ozone]
new4<-x[which(x$Month==5), ]
new4
new4<-new4[, Ozone, drop=FALSE]
max(new4[[1]])
new<-na.omit(new4)
new
max(new[[1]])
getwd()
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c()
?c
z
c(z, 555, z)
z*2+100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqirt
myDiv<-mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5, 10, length=30)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each=10)
num_vect<-c(0.5,55,-10,6)
tf<-nu_vect<1
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name<-c(my_char, "Lisa Wang")
my_name
paste(my_name, collapse=" ")
paste("Hello", "World!", sep = " ")
paste("Hello", "world!", sep=" ")
paste(c(1,2,3), c("X", "Y", "Z"), sep="")
pase(1:3, c("X", "Y", "Z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA, 1000)
myDate<-sample(c(y,z), 100)
myDate <- sample(c(y, z), 100)
myData <- sample(c(y, z), 100)
myNA<-is.na(myData)
myNA
myDate==NA
myData == NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x(c(3,5,7))
c(x[3,5,7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-20)]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vects)<_c("foo", "bar", "norf")
names(vects)<-c("foo", "bar", "norf")
names(vect2)<-c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector<-c(1:20)
myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)<-c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix
myMatrix2<-matrix(1:20, ncol=5, nrow=4)
identical(myMatrix, myMatrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData<-data.fram(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData)<-cnames
myData
0
1
swirl()
cube <- function(x, n) {#
        x^3#
}
cube(3)
x <- 1:10#
if(x > 5) {#
        x <- 0#
}
x
f <- function(x) {#
        g <- function(y) {#
                y + z#
        }#
        z <- 4#
        x + g(x)#
}
z <- 10#
f(3)
x <- 5#
y <- if(x < 3) {#
        NA#
} else {#
        10#
}
y
x<-matrix(1:6, 2 ,3)
x
x[1,2]
coin<-rbincm(1, 1, 0.5)
rbinom(1, 1, 0.5)
?rbinom
z<-matrix(1:8,2,4)
z
mean(z[, 2])
z<-c(1 2 3; 4 5 NA)
Z<-[1 2 3, 4 5 6]
Z<-c(1 2 3, 4 5 6)
z<-matrix(c(1, 2, 3, NA, 6, 7), 2, 3)
z
mean(z[, 2], na.rm=True)
mean(z[, 2], na.rm=true)
mean(z[, 2], na.rm=TRUE)
char(3)
cha(3)
str(3)
str(45)
setwd("/Users/lisa/Desktop/R programming/rprog-data-ProgAssignment3-data")
source("best.R")
best("TX", "heart attack")
source("best.R")#
  best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
source("best.R")
best("TX", "heart attack")
source("best.R")#
> best("TX", "heart attack")
best("TX", "heart attack")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
submit9)
submit()
submit()
submit()
submit()
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")#
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
submit()
